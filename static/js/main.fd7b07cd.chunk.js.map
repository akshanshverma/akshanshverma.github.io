{"version":3,"sources":["js/Test.jsx","App.js","serviceWorker.js","index.js"],"names":["Test","calc","x","y","window","innerWidth","innerHeight","_useSpring","useSpring","xy","config","mass","tension","friction","_useSpring2","Object","slicedToArray","props","set","react_default","a","createElement","className","onMouseMove","_ref","clientX","clientY","web","div","style","transform","interpolate","concat","App","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oRAKe,SAASA,IACpB,IAAMC,EAAO,SAACC,EAAGC,GAAJ,MAAU,CAACD,EAAIE,OAAOC,WAAa,EAAGF,EAAIC,OAAOE,YAAc,IADjDC,EAMNC,YAAU,iBAAO,CAAEC,GAAI,CAAC,EAAG,GAAIC,OAAQ,CAAEC,KAAM,GAAIC,QAAS,IAAKC,SAAU,QANrEC,EAAAC,OAAAC,EAAA,EAAAD,CAAAR,EAAA,GAMpBU,EANoBH,EAAA,GAMbI,EANaJ,EAAA,GAO3B,OACIK,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YAAYC,YAAa,SAAAC,GAAA,IAAYtB,EAAZsB,EAAGC,QAAqBtB,EAAxBqB,EAAeE,QAAf,OAAgCR,EAAI,CAAET,GAAIR,EAAKC,EAAGC,OACtFgB,EAAAC,EAAAC,cAACM,EAAA,EAASC,IAAV,CAAcN,UAAU,QAAQO,MAAO,CAAEC,UAAWb,EAAMR,GAAGsB,YAPtD,SAAC7B,EAAGC,GAAJ,qBAAA6B,OAAyB9B,EAAI,GAA7B,OAAA8B,OAAqC7B,EAAI,GAAzC,cAQPgB,EAAAC,EAAAC,cAACM,EAAA,EAASC,IAAV,CAAcN,UAAU,QAAQO,MAAO,CAAEC,UAAWb,EAAMR,GAAGsB,YAPtD,SAAC7B,EAAGC,GAAJ,qBAAA6B,OAAyB9B,EAAI,EAAI,GAAjC,OAAA8B,OAAyC7B,EAAI,EAAI,IAAjD,cAQPgB,EAAAC,EAAAC,cAACM,EAAA,EAASC,IAAV,CAAcN,UAAU,QAAQO,MAAO,CAAEC,UAAWb,EAAMR,GAAGsB,YAPtD,SAAC7B,EAAGC,GAAJ,qBAAA6B,OAAyB9B,EAAI,EAAI,IAAjC,OAAA8B,OAA0C7B,EAAI,EAAI,IAAlD,cAQPgB,EAAAC,EAAAC,cAACM,EAAA,EAASC,IAAV,CAAcN,UAAU,QAAQO,MAAO,CAAEC,UAAWb,EAAMR,GAAGsB,YAPtD,SAAC7B,EAAGC,GAAJ,qBAAA6B,OAAyB9B,EAAI,IAA7B,OAAA8B,OAAsC7B,EAAI,IAA1C,mBCIJ8B,mLARX,OACEd,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACrB,EAAD,cAJUkC,aCQEC,QACW,cAA7B/B,OAAOgC,SAASC,UAEe,UAA7BjC,OAAOgC,SAASC,UAEhBjC,OAAOgC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOrB,EAAAC,EAAAC,cAACoB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.fd7b07cd.chunk.js","sourcesContent":["\nimport React from 'react'\nimport { useSpring, animated } from 'react-spring'\n\n\nexport default function Test() {\n    const calc = (x, y) => [x - window.innerWidth / 2, y - window.innerHeight / 2]\n    const trans1 = (x, y) => `translate3d(${x / 10}px,${y / 10}px,0)`\n    const trans2 = (x, y) => `translate3d(${x / 8 + 35}px,${y / 8 - 230}px,0)`\n    const trans3 = (x, y) => `translate3d(${x / 6 - 250}px,${y / 6 - 200}px,0)`\n    const trans4 = (x, y) => `translate3d(${x / 3.5}px,${y / 3.5}px,0)`\n    const [props, set] = useSpring(() => ({ xy: [0, 0], config: { mass: 10, tension: 550, friction: 140 } }))\n    return (\n        <div className=\"container\" onMouseMove={({ clientX: x, clientY: y }) => set({ xy: calc(x, y) })}>\n            <animated.div className=\"card1\" style={{ transform: props.xy.interpolate(trans1) }} />\n            <animated.div className=\"card2\" style={{ transform: props.xy.interpolate(trans2) }} />\n            <animated.div className=\"card3\" style={{ transform: props.xy.interpolate(trans3) }} />\n            <animated.div className=\"card4\" style={{ transform: props.xy.interpolate(trans4) }} />\n        </div>\n    )\n}\n\n\n","import React, { Component } from 'react';\nimport './App.css';\nimport Test from \"./js/Test\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Test/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}